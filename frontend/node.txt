const fs = require("fs");
const userName = "Max";
/*
callback fn : a function which will be called for you 
once this operation is done cz write file is an Async task..so it can
 take a bit longer 

 */
// nodejs code
fs.writeFile("user-data.txt", "Name: " + userName, (err) => {
  if (err) {
    console.log(err);
    return;
  }
  console.log("WROTE FILE");
});

================================

// Importing http libraries
const http = require("http");
// Creating a server
//server object
const server = http.createServer((req, res) => {
  /*    const url = req.url;
    const method = req.method;
    console.log("Incoming Request");
    console.log(req.method, req.url);
    res.setHeader("Content-Type", "text/plain");
*/
  if (req.method === "POST") {
    let body = "";
    // Register an event listener for the end event li bisir la halo hon men baad
    // read lal data w hata bel chunk...yaane ma enta li 3amalet emit
    //.on is a method use to bind event handler.
    //No, these are event listeners, and their callback functions will only be fired when those particular events happen.  So the order doesn't really matter.
    req.on("end", () => {
      // 2
      //   console.log(body);
      const userName = body.split("=")[1]; //["username","omar"]
      res.end(`<h1> ${userName} </h1>`);
    });
    // Register an event listener for the data event
    // data is streamed into the server in chunks
    req.on("data", (chunk) => {
      /*
      1
      this req will run before the req.end
      Storing the chunk data
      */
      body += chunk;
    });
  } else {
    res.setHeader("Content-Type", "text/html");

    res.end(
      `<form method="POST"><input type="text" name="username"><button type="submit">Create User</button></form>`
    );
  }
});

// Starting the server
server.listen(5000);

================================================================

const express = require("express");
// this function will give us an app object ,
//  its a rich object full of functionalities and features in this app constant
const app = express();

// manually parsing data
app.use(function (req, res, next) {
  let body = "";
  req.on("end", () => {
    const userName = body.split("=")[1]; //["username","omar"]
    if (userName) {
      req.body = { name: userName };
    }
    next();
  });
  req.on("data", (chunk) => {
    body += chunk;
  });
});

// req and res hene object , next is fn
//next is called if u dont want to send the response in this middleware
//but u want to forward the request to the next middleware in line
// and then send the response
app.use((req, res, next) => {
  if (req.body) {
    return res.send("<h1>" + req.body.name + "</h1>");
  }

  res.send(
    `<form method="POST"><input type="text" name="username"><button type="submit">Create User</button></form>`
  );
  //   next();
});

//one feature here is again a listen method port 5000
app.listen(5000);


=============================================================

  "scripts": {
    "start": "node ./Max-Node/index.js"
    }

    he bt2elo npm start
    bas aya edem ger start..ex 

    
  "scripts": {
    "dev": "node ./Max-Node/index.js"
    }


badak t2elo npm run dev
darure thet run iza shi ger start
================================================